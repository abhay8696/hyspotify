{"version":3,"sources":["firebaseConfig.js","contexts/spotifyTokenContext.js","contexts/userDataContext.js","contexts/miniPlayer2Context.js","contexts/chattingWithContext.js","api/serverRequests.js","spotify/styles/searchStyles.js","spotify/searchComp.js","loadingCompStyles.js","loadingComp.js","contexts/spotifyTrackUriContext.js","contexts/playingTrackContext.js","spotify/styles/musicboxStyles.js","spotify/musicBox.js","spotify/styles/spotifyStyles.js","spotify/spotifyNav.js","spotify/styles/miniPlayerStyles.js","spotify/miniPlayer.js","chats/miniPlayer2.js","chats/styles/chatBoxStyles.js","chats/chatBox.js","chats/chatList.js","chats/styles/chatListStyles.js","spotify/spotifyRoot.js","spotify/spotifyLogin.js","spotify/hooks/useAuth.js","spotify/loginStyles.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","SpotifyTokenContext","createContext","UserDataContext","MiniPlayer2Context","ChattingWithContext","Config","productionBackend","console","log","db","getFirestore","isSharingSongAPI","data","a","myID","myName","frndID","frndName","isSharingSong","songSharer","myChatRef","doc","frndChatRef","getDoc","chatRefDocSnap1","chatRefDocSnap2","exists","updateDoc","setDoc","name","playSharedSongAPI","uri","trackName","sharedUri","sharedTrackName","addMsgToMyDatabase","msg","msgRef","collection","addDoc","from","createdAt","admin","firestore","Timestamp","now","toDate","then","lastMsgText","lastMsgTime","addMsgToFrndsDatabase","SearchStyles","makeStyles","theme","searchComp","padding","display","flexDirection","alignItems","backgroundColor","searchCompHeader","textAlign","searchBar","width","margin","searchBox","flexGrow","fontSize","borderRadius","outline","borderStyle","searchResults","height","overflow","track","animation","opacity","trackImg","trackInfo","marginLeft","justifyContent","borderBottom","flex","trackTitle","trackArtist","SearchComp","props","classes","closeSearchDrawer","playTrack","useContext","spotifyToken","useState","searchText","setSearchText","searchResult","setSearchResult","useEffect","undefined","cancel","config","method","url","headers","axios","res","tracks","items","map","smallestImg","album","images","reduce","smallest","img","artist","artists","title","albumUrl","catch","err","className","placeholder","onChange","evt","target","value","autoFocus","array","item","push","onClick","src","displayResults","LoadingCompStyles","loadingComp","position","top","color","dot","animationName","animationDuration","animationIterationCount","animationTimingFunction","left","LoadingComp","description","SpotifyTrackUriContext","PlayingTrackContext","MusicBoxStyles","musicBox","overflowY","maxHeight","topTracksHeader","fontWeight","topTrackList","overflowX","cursor","topTrack","marginTop","topTrackImg","topTrackInfo","topTrackArtist","borderColor","searchDrawer","fontFamily","closeSearchDiv","closeSearchButton","border","MusicBox","insideChatBox","closeSongDrawer","userData","chattingWith","setSpotifyTrackUri","top50","setTop50","myTopTracks","setMyTopTracks","newReleases","setNewReleases","setSearchDrawer","fetchTop50","fetchMyTopTracks","fetchNewReleases","id","display_name","window","localStorage","setItem","albums","Drawer","anchor","open","onClose","shortName","length","substr","concat","topTrackName","displayTop50","style","displaymyTopTracks","albumName","fetchAlbumTracks","displayNewReleases","SpotifyStyles","spotifyRoot","abhay","kamble","spotifyNav","navbar","zIndex","profileInfo","profileInfoImg","profileInfoBody","profileName","logoutDiv","bottom","right","logoutButt","transform","hy","spotifyH1","searchIcon","dp_chats","chatIcon","marginRight","dpImg","spotifyTitle2","frndDP","spotifyTitle_name","hy2","spotifyH12","chatListDrawer","SpotifyNav","setDpImg","profileDrawer","setProfileDrawer","setSpotifyToken","loggedOut","insideChatsList","toggleChatListDrawer","toggleChatBox","alt","spotifyTitle","document","fullScreen","mozFullScreen","webkitIsFullScreen","activeElement","requestFullscreen","proDp","proName","clear","profileSummary","MiniPlayerStyles","miniPlayer","playNotificaton","playingSongName","fontStyle","MiniPlayer","vertical","horizontal","trackNotificationOpen","setTrackNotificationOpen","spotifyTrackUri","playingTrack","setPlayingTrack","handleTrackNotification","closeTrackNotification","event","reason","token","showSaveIcon","play","callback","state","isPlaying","uris","Snackbar","anchorOrigin","autoHideDuration","Paper","elevation","MiniPlayer2","ChatBoxStyles","chatBox","songSwitch","musicIcon","songDrawer","songDrawerTitle","listenTogetherIcons","msgArea","boxSizing","msgBucket","myMsg","minWidth","maxWidth","boxShadow","frndMsg","time","typingArea","textBox","sendButt","backendRoute","ChatBox","miniPlayer2","setMiniPlayer2","textMsg","setTextMsg","setMsgBucket","setSongDrawer","setIsSharingSong","tempStyle","setTempStyle","dailogOpen","setDailogOpen","dummy","useRef","tempStyle1","paddingBottom","arr","query","orderBy","limit","sharingRef","onSnapshot","snaps","forEach","current","scrollIntoView","behavior","setTimeout","sendMsg","preventDefault","replace","Switch","val","isSharingSongFunc","checked","ref","timestamp","date","hrs","mins","Date","seconds","getHours","getMinutes","displayMsgs","onSubmit","Dialog","DialogTitle","DialogActions","ChatListStyles","chatList","chatListItem","dp","chatListName","ChatList","setChattingWith","allUsers","setAllUsers","chatBoxOpen","setChatBoxOpen","fetchUsers","get","error","closeChatBox","user","openChatBox","displayAllUsers","clientID","redirectUri","SpotifyRoot","setUserData","chatDrawerOn","setChatDrawerOn","fetchUserData","post","UseAuth","code","accessToken","setAccessToken","setRefreshToken","setExpiresIn","productionHost","refreshToken","expiresIn","history","pushState","LoginStyles","spotifyLogin","loadingDots","pageBody","introText","loginButton","loginButt","marginBottom","takingToSpotify","SpotifyLogin","spotifyclientID","authURL","URLSearchParams","location","search","clicked","setClicked","href","App","spotifytoken","getItem","Provider","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e12a3856.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAINVFV1RI91b9KJ15qKJQF3Piv1GbwF_s\",\n    authDomain: \"hyspotify-1.firebaseapp.com\",\n    projectId: \"hyspotify-1\",\n    storageBucket: \"hyspotify-1.appspot.com\",\n    messagingSenderId: \"97714255131\",\n    appId: \"1:97714255131:web:8f9b8de2325733e0048fbe\",\n    measurementId: \"G-QN47HC9Z9N\"\n  };\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nexport default app;","import { createContext } from \"react\";\n\nexport const SpotifyTokenContext = createContext(null);","import { createContext } from \"react\";\n\nexport const UserDataContext = createContext(null);","import { createContext } from \"react\";\n\nexport const MiniPlayer2Context = createContext(null);","import { createContext } from \"react\";\n\nexport const ChattingWithContext = createContext(null);","import axios from 'axios'\nimport Config from '../config.json';\nimport app from '../firebaseConfig'\nimport { getFirestore, doc, setDoc, updateDoc, onSnapshot, collection, query, orderBy, limit, addDoc, getDoc  } from 'firebase/firestore';\nimport admin from 'firebase-admin'\n\nlet backendRoute;\nif(process.env.NODE_ENV === \"development\"){\n    backendRoute = Config.localBackend\n    console.log('development MODE')\n}else {backendRoute = Config.productionBackend; \n    console.log('production MODE')\n}\n\nconst db = getFirestore(app)\n\n\nexport const isSharingSongAPI = async data => {\n    const { myID, myName, frndID, frndName, isSharingSong, songSharer } = data\n    const myChatRef = doc(db, \"users\", myID, \"chats\",`${frndName}-${frndID}`)\n    const frndChatRef = doc(db, \"users\", frndID, \"chats\",`${myName}-${myID}`)\n\n    const chatRefDocSnap1 = await getDoc(myChatRef)\n    const chatRefDocSnap2 = await getDoc(frndChatRef)\n    \n    if(chatRefDocSnap1.exists() && chatRefDocSnap2.exists()){\n        updateDoc(myChatRef, {\n            isSharingSong : isSharingSong,\n            songSharer: songSharer\n        })\n        updateDoc(frndChatRef, {\n            isSharingSong : isSharingSong,\n            songSharer: songSharer\n        })\n    }else{\n        setDoc(myChatRef, {\n            name: frndName,\n            isSharingSong : isSharingSong,\n            songSharer: songSharer\n        })\n        setDoc(frndChatRef, {\n            name: myName,\n            isSharingSong : isSharingSong,\n            songSharer: songSharer\n        })\n    }\n    \n}\n\nexport const playSharedSongAPI = async data=> {\n    const { myID, myName, frndID, frndName, uri, trackName } = data\n    const myChatRef = doc(db, \"users\", myID, \"chats\",`${frndName}-${frndID}`)\n    const frndChatRef = doc(db, \"users\", frndID, \"chats\",`${myName}-${myID}`)\n\n    const chatRefDocSnap1 = await getDoc(myChatRef)\n    const chatRefDocSnap2 = await getDoc(frndChatRef)\n    \n    if(chatRefDocSnap1.exists() && chatRefDocSnap2.exists()){\n        updateDoc(myChatRef, {\n            sharedUri: uri, \n            sharedTrackName: trackName\n        })\n        updateDoc(frndChatRef, {\n            sharedUri: uri, \n            sharedTrackName: trackName\n        })\n    }\n}\n\nexport const pauseSongAPI = (data)=> {\n    const { userData, chattingWith, playingTrack} = data;\n    axios.post(`${backendRoute}/chats/pauseSong`, {\n        myCred: userData,\n        frndCred: chattingWith,\n        playingTrack: playingTrack\n    })\n    .then(res=> console.log(res.data))\n    .catch(err=> console.error(err))\n}\n\nexport const addMsgToMyDatabase = async (myID, frndName, frndID, msg)=> {\n    let myChatRef = doc(db, \"users\", myID, \"chats\",`${frndName}-${frndID}`)\n    let msgRef = collection(myChatRef, \"messages\")\n\n    const chatRefDocSnap = await getDoc(myChatRef)\n    if(chatRefDocSnap.exists()){\n        console.log('existsssssssssss')\n        const addMsg = addDoc(msgRef, {\n            from: 'me',\n            msg: msg,\n            createdAt: admin.firestore.Timestamp.now().toDate()\n        }).then(()=> {\n            updateDoc(myChatRef, {\n                name: frndName,\n                lastMsgText: msg,\n                lastMsgTime: admin.firestore.Timestamp.now().toDate()\n            })\n        })\n    }else {\n        console.log('DO NOTTTTTTTTTTTTTTT')\n        const addMsg = addDoc(msgRef, {\n            from: 'me',\n            msg: msg,\n            createdAt: admin.firestore.Timestamp.now().toDate()\n        }).then(()=> {\n            setDoc(myChatRef, {\n                name: frndName,\n                lastMsgText: msg,\n                lastMsgTime: admin.firestore.Timestamp.now().toDate()\n            })\n        })\n    }\n    \n}\nexport const addMsgToFrndsDatabase = async(frndID, myName, myID, msg)=> {\n    let frndChatRef = doc(db, \"users\", frndID, \"chats\",`${myName}-${myID}`)\n    let msgRef = collection(frndChatRef, \"messages\")\n\n    const chatRefDocSnap = await getDoc(frndChatRef)\n    if(chatRefDocSnap.exists()){\n        const addMsg = addDoc(msgRef, {\n            from: myName,\n            msg: msg,\n            createdAt: admin.firestore.Timestamp.now().toDate()\n        }).then(()=> {\n            updateDoc(frndChatRef, {\n                name: myName,\n                lastMsgText: msg,\n                lastMsgTime: admin.firestore.Timestamp.now().toDate()\n            })\n        })\n    }else {\n        const addMsg = addDoc(msgRef, {\n            from: myName,\n            msg: msg,\n            createdAt: admin.firestore.Timestamp.now().toDate()\n        }).then(()=> {\n            setDoc(frndChatRef, {\n                name: myName,\n                lastMsgText: msg,\n                lastMsgTime: admin.firestore.Timestamp.now().toDate()\n            })\n        })\n    }\n}","\nimport { makeStyles } from '@mui/styles';\n\nconst SearchStyles = makeStyles(theme=> ({\n    searchComp: {\n        padding: '8px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        backgroundColor: '#42ff75'\n    },\n    searchCompHeader:{\n        textAlign: 'center',\n    },\n    searchBar:{\n        width: '90vw',\n        display: 'flex',\n        margin:'8px',\n    },\n    searchBox: {\n        flexGrow: '1',\n        padding : '12px 8px',\n        fontSize: '16px',\n        borderRadius: '10px',\n        outline: 'none',\n        borderStyle: 'none',\n        '&:focus': {\n            \n        }\n    },\n    searchResults: {\n        height: '50vh',\n        overflow: 'scroll'\n    },\n    track: {\n        display: 'flex',\n        margin: '8px auto',\n        animation: '$risein 500ms'\n    },\n    '@keyframes risein': {\n        '0%': {\n            opacity: '0'\n        },\n        '100%': {\n            opacity: '1'\n        }\n    },\n    trackImg:{\n        borderRadius: '10px'\n    },\n    trackInfo:{\n        marginLeft: '8px',\n        display: 'flex', flexDirection: 'column',\n        justifyContent: 'center',\n        borderBottom: '1px solid #1DB954',\n        flex: '1'\n    },\n    trackTitle:{\n\n    },\n    trackArtist:{\n        fontSize: '0.8rem',\n        opacity: '0.7'\n    },\n}))\n\nexport default SearchStyles","import React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios'\n\n//contexts\nimport { SpotifyTokenContext } from '../contexts/spotifyTokenContext';\n\n//styles\nimport SearchStyles from './styles/searchStyles'\n\n//material ui\n\nconst SearchComp = (props) => {\n    //styles\n    const classes = SearchStyles();\n\n    //props\n    const { closeSearchDrawer, playTrack } = props;\n    //contexts\n    const\n    [spotifyToken, setSpotifyToken] = useContext(SpotifyTokenContext);\n\n    //states\n    const\n    [searchText, setSearchText] = useState(''),\n    [searchResult, setSearchResult] = useState([]);\n\n    //life cycles\n    useEffect(()=> {\n        if(!searchText) return  setSearchText('');\n        setSearchResult(undefined)\n        let cancel = false;\n        const config={\n            method: 'get',\n            url: `https://api.spotify.com/v1/search?type=track&market=IN&q=${searchText}`,\n            headers: {\n                'Content-Type' : 'application/json',\n                'Accept': 'application/json',\n                'Authorization' : `Bearer ${spotifyToken}`,\n            }\n        }\n        axios(config).then((res)=> {\n            if(cancel) return; //this will only send axios request when typing is pauses/stopped\n            console.log(res.data.tracks.items)\n            setSearchResult(\n                res.data.tracks.items.map(track=> {\n                    const smallestImg = track.album.images.reduce( //find the smallest image\n                        (smallest, img)=> {\n                            if(img.height < smallest.height) return img;\n                            return smallest;\n                        },\n                        track.album.images[0]\n                    )\n\n                    return{\n                        artist: track.artists[0].name,\n                        title: track.name,\n                        uri: track.uri,\n                        albumUrl: smallestImg\n                    }\n                })\n            )\n            console.log(searchResult)\n        })\n        .catch(err=> {\n            console.log(err)\n        })\n        // spotifyApi.searchTracks(searchText).then(res=> {\n        //     if(cancel) return;\n        // })\n        return ()=> cancel = true;\n    }, [searchText])\n\n    //functions\n    const\n    displayResults = ()=> {\n        let array = [];\n        if(searchResult){\n            console.log(searchResult)\n            searchResult.map(item=> {\n                array.push(\n                    <div \n                    className={classes.track} \n                    key={item.albumUrl.url}\n                    onClick={()=> {\n                        playTrack(item.uri, item.title)\n                        setSearchText('')\n                        closeSearchDrawer()\n                        // hideSpotify()\n                    }}>\n                        <span>\n                            <img \n                            src={item.albumUrl.url} \n                            className={classes.trackImg}\n                            />\n                        </span>\n                        <div className={classes.trackInfo}>\n                            <span className={classes.trackTitle}> {item.title} </span>\n                            <span className={classes.trackArtist}> {item.artist} </span>\n                        </div>\n                    </div>\n                )\n            })\n            return array\n        }\n    }\n\n\n    return (\n        <div className={classes.searchComp}>\n            <span className={classes.searchCompHeader}>Search Tracks </span>\n            <div className={classes.searchBar}>\n                <input \n                placeholder='Type Here'\n                onChange = {evt=> setSearchText(evt.target.value)}\n                className={classes.searchBox}\n                autoFocus\n                />\n            </div>\n            <div className={classes.searchResults}>\n                {displayResults()}\n            </div>\n        </div>\n    );\n};\n\nexport default SearchComp;","import { makeStyles } from '@mui/styles';\n\nconst LoadingCompStyles = makeStyles(theme=> ({\n    loadingComp: {\n        position: 'absolute',\n        width: '100vw',\n        top: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        color: 'white'\n    },\n    dot: {\n        display: 'block',\n        width: '1.5rem',\n        height: '1.5rem',\n        backgroundColor: 'white',\n        borderRadius: '50%',\n        margin: '1rem',\n        animationName: '$dotAnimation',\n        animationDuration: '1000ms',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'ease-in-out',\n        position: 'relative',\n    },\n    '@keyframes dotAnimation': {\n        '0%': { backgroundColor: '#42ff75', left: '-50px'},\n        '50%': { backgroundColor: '#1DB954', left: '50px'},\n        // '75%': { backgroundColor: '#42ff75', left: '10px'},\n        '100%': { backgroundColor: '#42ff75', left: '-50px'},\n    }, \n}))\n\nexport default LoadingCompStyles;","import React from 'react';\n//styles\nimport LoadingCompStyles from './loadingCompStyles';\n\nconst LoadingComp = (props) => {\n    //styles\n    const classes = LoadingCompStyles()\n    //props\n    const { description } = props;\n\n    return (\n        <div className={classes.loadingComp}>\n            <div className={classes.dot}></div>\n            <span>{description}</span>\n        </div>\n    );\n};\n\nexport default LoadingComp;","import { createContext } from \"react\";\n\nexport const SpotifyTrackUriContext = createContext(null);","import { createContext } from \"react\";\n\nexport const PlayingTrackContext = createContext(null);","import { keyframes } from '@emotion/react';\nimport { makeStyles } from '@mui/styles';\n\nconst MusicBoxStyles = makeStyles(theme=> ({\n    musicBox: {\n        '@media only screen and (min-width: 768px)': { //desktop\n            fontSize: '14px'\n        },\n        '@media only screen and (max-width: 767px)': { //phones\n            fontSize: '14px'\n        },\n        overflowY: 'scroll',\n        maxHeight: '80vh'\n    },\n    topTracksHeader:{\n        margin: '12px auto 4px 8px',\n        fontSize: '16px',\n        fontWeight: '600'\n    },\n    topTrackList: {\n        display: 'flex',\n        overflowX: 'scroll',\n        '&::-webkit-scrollbar': {\n            '@media only screen and (min-width: 400px)': { //desktop\n                backgroundColor: 'inherit',\n                height: '4px',\n                opacity: '0.1',\n            },\n            // '@media only screen and (max-width: 767px)': { //phones\n            //     height: '4px'\n            // },\n        },\n        '&::-webkit-scrollbar-thumb': {\n            backgroundColor: 'grey',\n            height: '4px',\n            cursor: 'pointer',\n            borderRadius: '2px'\n        },\n    },\n    topTrack: {\n        display: 'flex',\n        flexDirection: 'column',\n        cursor: 'pointer',\n        marginTop: '4px',\n        marginLeft: '8px', \n    },\n    '@keyframes riseout': {\n        '0%': {\n            opacity: '0'\n        },\n        '100%': {\n            opacity: '1'\n        },\n    },\n    topTrackImg: {\n        height: '144px',\n        width: '144px',\n        borderRadius: '10px',\n        animation: '$riseout 500ms ease-in-out',\n        // margin: '8px 8px 0 auto',\n    },\n    topTrackInfo: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    topTrackArtist:{\n        opacity: '0.6',\n        fontSize: '14px'\n    },\n    searchBar:{\n        // width: '100vw',\n        display: 'flex',\n        margin:'auto 8px',\n    },\n    searchBox: {\n        flexGrow: '1',\n        padding : '12px 8px',\n        margin: '16px auto auto auto',\n        backgroundColor: 'white',\n        fontSize: '16px',\n        borderRadius: '10px',\n        outline: 'none',\n        borderColor: 'inherit',\n        borderStyle: 'none',\n        color: '#5c5c5c',\n        display: 'flex', \n        alignItems: 'center',\n        justifyContent: 'space-between'\n    },\n    searchDrawer:{\n        fontFamily: 'Montserrat',\n    },\n    closeSearchDiv:{\n        display: 'flex', justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#42ff75'\n    },\n    closeSearchButton:{\n        margin: '8px',\n        padding: '4px 8px',\n        border: '1px solid #fff',\n        display: 'flex', \n        justifyContent: 'center',\n        alignItems: 'center',\n        borderRadius: '10px',\n        cursor: 'pointer',\n    },\n}))\n\nexport default MusicBoxStyles;","import React, { useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\n//server APIs\nimport { playSharedSongAPI } from '../api/serverRequests';\n//components\nimport SearchComp from './searchComp';\nimport LoadingComp from '../loadingComp';\n//contexts\nimport { SpotifyTokenContext } from '../contexts/spotifyTokenContext';\nimport { SpotifyTrackUriContext } from '../contexts/spotifyTrackUriContext';\nimport { UserDataContext } from '../contexts/userDataContext';\nimport { PlayingTrackContext } from '../contexts/playingTrackContext';\nimport { ChattingWithContext } from '../contexts/chattingWithContext';\n\n//material ui\nimport MusicBoxStyles from './styles/musicboxStyles'\nimport TextField from '@mui/material/TextField';\nimport Drawer from '@mui/material/Drawer';\nimport { Button } from '@mui/material';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst MusicBox = (props) => {\n    //styles\n    const classes = MusicBoxStyles();\n\n    //props\n    const { insideChatBox, closeSongDrawer, isSharingSong } = props;\n\n    //contexts\n    const\n    [spotifyToken, setSpotifyToken] = useContext(SpotifyTokenContext),\n    [userData, setUserData] = useContext(UserDataContext),\n    [ chattingWith, setChattingWith ] = useContext(ChattingWithContext),\n    [spotifyTrackUri, setSpotifyTrackUri] = useContext(SpotifyTrackUriContext),\n    [ playingTrack, setPlayingTrack ] = useContext(PlayingTrackContext);\n\n    //states\n    const\n    [ top50, setTop50 ] = useState(),\n    [ myTopTracks, setMyTopTracks ] = useState(),\n    [ newReleases, setNewReleases ] = useState(),\n    [ searchDrawer, setSearchDrawer ] = useState(false),\n    [ loadingTop50, setLoadingTop50 ] = useState(true),\n    [ loadingTopTracks, setLoadingTopTracks ] = useState(true);\n\n    //life cycle methods\n    useEffect(()=> {\n        fetchTop50();\n        fetchMyTopTracks();\n        fetchNewReleases();\n    }, [userData])\n\n    //functions\n    const\n    playTrack = (uri, trackName)=> {\n        if(isSharingSong){\n            playSharedSongAPI({ \n                myID: userData.id, \n                myName: userData.display_name, \n                frndID: chattingWith.id, \n                frndName: chattingWith.display_name, \n                uri, \n                trackName \n            });\n        }else{\n            setSpotifyTrackUri({uri, trackName, isSharingSong});\n        }\n        window.localStorage.setItem('last played track', uri);\n        if(closeSongDrawer) closeSongDrawer()\n    },\n    fetchTop50 = ()=> {\n        const config={\n            method: 'get',\n            url: \"https://api.spotify.com/v1/playlists/37i9dQZEVXbLZ52XmnySJg?market=IN\",\n            headers: {\n                'Content-Type' : 'application/json',\n                'Accept': 'application/json',\n                'Authorization' : `Bearer ${spotifyToken}`,\n            }\n        }\n        axios(config).then((res)=> {\n            setTop50(res.data.tracks.items);\n        })\n        .catch(err=> {\n            console.log(err)\n        })\n    },\n    fetchMyTopTracks = ()=> {\n        const config={\n            method: 'get',\n            url: \"https://api.spotify.com/v1/me/top/tracks?time_range=medium_term&limit=20\",\n            headers: {\n                'Content-Type' : 'application/json',\n                'Accept': 'application/json',\n                'Authorization' : `Bearer ${spotifyToken}`,\n            }\n        }\n        axios(config).then((res)=> {\n            if(res.data.items) setMyTopTracks(res.data.items)\n        })\n        .catch(err=> {\n            console.log(err)\n        })\n    },\n    fetchNewReleases = ()=> {\n        const config={\n            method: 'get',\n            url: \"https://api.spotify.com/v1/browse/new-releases?country=IN\",\n            headers: {\n                'Content-Type' : 'application/json',\n                'Accept': 'application/json',\n                'Authorization' : `Bearer ${spotifyToken}`,\n            }\n        }\n        axios(config).then((res)=> {\n            console.log('new Releases')\n            setNewReleases(res.data.albums.items)\n            console.log('new Releases')\n        })\n        .catch(err=> {\n            console.log(err)\n        })\n    },\n    fetchAlbumTracks = (id)=> {\n        const config={\n            method: 'get',\n            url: `https://api.spotify.com/v1/albums/${id}/tracks`,\n            headers: {\n                'Content-Type' : 'application/json',\n                'Accept': 'application/json',\n                'Authorization' : `Bearer ${spotifyToken}`,\n            }\n        }\n        axios(config).then((res)=> {\n            console.log('new ALBUM')\n            console.log(res.data)\n            console.log('new ALBUM')\n        })\n        .catch(err=> {\n            console.log(err)\n        })\n    },\n    displaymyTopTracks = ()=> {\n        console.log(myTopTracks)\n        let array = [];\n        if(myTopTracks){\n            let trackName;\n            myTopTracks.map(track=> {\n                let shortName = `${track.name} = ${track.name.length}`;\n                if(shortName.length > 25){\n                    //reduce the length of track name to save space\n                    trackName = shortName.substr(0,25).concat('...')\n                }else( trackName = track.name)\n                array.push(\n                    <div \n                    className={classes.topTrack} key={track.id}\n                    onClick={()=> playTrack(track.uri, track.name)}\n                    >\n                        <img \n                        src={track.album.images[1].url} \n                        key={track.id}\n                        className={classes.topTrackImg}\n                        />\n                        <div className={classes.topTrackInfo}>\n                            <span className={classes.topTrackName}> {trackName} </span>\n                            <span className={classes.topTrackArtist}> {track.artists[0].name} </span>\n                        </div>\n                    </div>\n                )\n            })\n        }\n        if(array.length === 0) array.push( \n            <p \n            style={{marginLeft: '8px'}}\n            className={classes.topTrackArtist}>Songs Frequently Heard By You Will Be Displyed Here</p>\n            )\n        return array;\n    },\n    displayTop50 = ()=> {\n        if(top50){\n            let array = [], trackName;\n            top50.map(item=> {\n                let shortName = `${item.track.name} = ${item.track.name.length}`;\n                if(shortName.length > 25){\n                    //reduce the length of track name to save space\n                    trackName = shortName.substr(0,25).concat('...')\n                }else( trackName = item.track.name)\n                array.push(\n                    <div \n                    className={classes.topTrack} key={item.track.id}\n                    onClick={()=> playTrack(item.track.uri, item.track.name)}\n                    >\n                        <img \n                        src={item.track.album.images[1].url} \n                        key={item.track.id}\n                        className={classes.topTrackImg}\n                        />\n                        <div className={classes.topTrackInfo}>\n                            <span className={classes.topTrackName}> {trackName} </span>\n                            <span className={classes.topTrackArtist}> {item.track.artists[0].name} </span>\n                        </div>\n                    </div>\n                )\n            })\n            return array;\n        }\n    },\n    displayNewReleases = ()=> {\n        if(newReleases){\n            let array = [], albumName;\n            newReleases.map(item=> {\n                let shortName = `${item.name} = ${item.name.length}`;\n                if(shortName.length > 25){\n                    //reduce the length of track name to save space\n                    albumName = shortName.substr(0,25).concat('...')\n                }else( albumName = item.name)\n                array.push(\n                    <div \n                    className={classes.topTrack} key={item.id}\n                    onClick={()=> fetchAlbumTracks(item.id)}\n                    >\n                        <img \n                        src={item.images[0].url} \n                        key={item.id}\n                        className={classes.topTrackImg}\n                        />\n                        <div className={classes.topTrackInfo}>\n                            <span className={classes.topTrackName}> {albumName} </span>\n                            <span className={classes.topTrackArtist}> {item.artists[0].name} </span>\n                        </div>\n                    </div>\n                )\n            })\n            return array;\n        }\n    },\n    closeSearchDrawer = ()=> {\n        setSearchDrawer(false)\n    };\n\n    return (\n        <div className={classes.musicBox}>\n            <div className={classes.searchBar}>\n                <span \n                className={classes.searchBox}\n                onClick={()=> setSearchDrawer(true)}\n                >\n                    Search Tracks...\n                    <SearchIcon />\n                </span>\n                <Drawer\n                    anchor={'top'}\n                    open={searchDrawer}\n                    onClose={()=> closeSearchDrawer()}\n                    className={classes.searchDrawer}\n                >\n                    <SearchComp \n                    closeSearchDrawer={closeSearchDrawer}\n                    playTrack={playTrack}\n                    />\n                    <div className={classes.closeSearchDiv}>\n                        <span \n                        onClick={()=> closeSearchDrawer()}\n                        className={classes.closeSearchButton}\n                        >\n                            CLOSE<CancelIcon />\n                        </span>\n                    </div>\n                </Drawer>\n            </div>\n            <div className={classes.topTracksHeader}>Top 50 In India</div>\n            <div className={classes.topTrackList}>\n                {displayTop50()}\n            </div>\n            <div className={classes.topTracksHeader}>Frequently Played</div>\n            <div className={classes.topTrackList}>\n                {displaymyTopTracks()}\n            </div>\n            { !insideChatBox ?\n            <>\n            <div className={classes.topTracksHeader}>New Released Albums</div>\n            <div className={classes.topTrackList}>\n                {displayNewReleases()}\n            </div>\n            </>\n            : null\n            }\n        </div>\n    );\n};\n\nexport default MusicBox;","import { keyframes } from '@emotion/react';\nimport { makeStyles } from '@mui/styles';\n\nconst SpotifyStyles = makeStyles(theme=> ({\n    spotifyRoot: {\n        maxHeight: '100vh',\n        color: 'white',\n    },\n    abhay: {\n        color: '#42ff75',\n        fontSize: '0.7rem'\n    },\n    kamble: {\n        color: 'white',\n        fontSize: '0.7rem'\n    },\n    spotifyNav:{\n        // backgroundColor: '#42ff75',\n        borderBottom: '1px solid #42ff75',\n        '@media only screen and (min-width: 768px)': { //desktop\n            padding: '2rem 0rem',\n            // backgroundColor: 'red',\n            fontSize: '2.5rem',\n        },\n        '@media only screen and (max-width: 767px)': { //phones\n            padding: '1rem 0.2rem',\n            // backgroundColor: 'green',\n            fontSize: '2rem',\n        },\n        '&:hover': {\n            animation: '$nav 5000ms'\n        },\n    },\n    '@keyframes nav': {\n        '0%': {},\n        '100%': {\n            // transform: 'scaleY(50%)'\n        }\n    },\n    navbar: {\n        display: 'flex', alignItems: 'center',\n        justifyContent: 'space-between',\n        zIndex: '10'\n    },\n    profileInfo: {\n        animationName: '$profileInfo',\n        animationDuration: '400ms',\n        animationName: '$profileInfo',\n        animationDirection: 'alternate',\n        // animationTimingFunction: 'ease-out',\n        backgroundColor: '#42ff75',\n        display: 'flex',\n        padding: '1rem 0.2rem',\n        zIndex: '1',\n    },\n    profileInfoImg: {\n        height: '144px',\n        width: '144px',\n        borderRadius: '50%',\n        opacity: '0',\n        animation: '$pro 200ms 200ms forwards',\n        '& svg': {\n            width: '144px',\n            height: '144px'\n        }\n    },\n    profileInfoBody: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        marginLeft: '0.5rem',\n        opacity: '0',\n        animation: '$pro 200ms 500ms forwards',\n        // animationDuration: '500ms',\n        // animationDelay: '1000ms'\n    },\n    profileName:{\n        fontSize: '3rem',\n    },\n    logoutDiv: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        justifyContent: 'flex-end',\n        flex: '1',\n        opacity: '0',\n        animation: '$pro 200ms 800ms forwards',\n        position: 'absolute',\n        bottom: '8px',\n        right: '8px'\n    },\n    logoutButt:{\n        display: 'flex', alignItems: 'center',\n        border: '1px solid white',\n        padding: '1px 2px',\n        fontSize: '0.7rem',\n        borderRadius: '10px',\n        '& > *': {\n            margin: 'auto 2px'\n        },\n        '&:hover': {\n            color: '#1DB954',\n            backgroundColor: 'white',\n        },\n        cursor: 'pointer'\n    },\n    '@keyframes profileInfo': {\n        '0%': {\n            transform: 'translateY(-100%)',\n            opacity: '0'\n        },\n        '35%': {\n            opacity: '0'\n        },\n        '100%': {\n            transform: 'translateY(0px)',\n            opacity: '1'\n        },\n    },\n    '@keyframes pro': {\n        '100%': {\n            opacity: '1',\n        },\n    },\n    hy:{\n        color: 'white'\n    },\n    spotifyH1:{\n        color: '#42ff75',\n    },\n    searchIcon:{\n        color: '#42ff75',\n        fontSize: 'large',\n    },\n    dp_chats: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    chatIcon: {\n        color: '#42ff75',\n        fontSize: '2rem',\n        marginRight: '1rem'\n    },\n    dpImg:{\n        height: '40px',\n        borderRadius: '50%',\n        '@media only screen and (min-width: 768px)': { //desktop\n            height: '50px',\n        },\n    },\n    spotifyTitle2:{\n        display: 'flex',\n        alignItems: 'flex-end'\n    },\n    frndDP:{\n        height: '3rem',\n        borderRadius: '50%',\n        '@media only screen and (min-width: 768px)': { //desktop\n            height: '50px',\n        },\n        '& svg': {\n            height: '48px',\n            width: '48px'\n        }\n    },\n    spotifyTitle_name:{\n        fontSize: '0.9rem',\n        marginLeft: '4px',\n        display: 'flex',\n        alignItems: 'flex-start',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    hy2: {\n        fontSize: '0.6rem'\n    },\n    spotifyH12:{\n        fontSize: '0.6rem',\n        color: '#42ff75',\n    },\n    frndName:{\n        fontSize: '1.5rem',\n        color: 'white'\n    },\n    chatListDrawer: {\n        height: '50vh'\n    },\n}))\n\nexport default SpotifyStyles;","import React, { useState, useEffect, useContext } from 'react';\nimport Config from '../config.json';\nimport axios from 'axios';\n\n//context\nimport { SpotifyTokenContext } from '../contexts/spotifyTokenContext';\nimport { UserDataContext } from '../contexts/userDataContext';\nimport { ChattingWithContext } from '../contexts/chattingWithContext';\n//components\nimport MusicBox from './musicBox';\n//styles\nimport SpotifyStyles from './styles/spotifyStyles'\nimport LogoutIcon from '@mui/icons-material/Logout';\n//material ui\nimport Drawer from '@mui/material/Drawer';\nimport ChatIcon from '@mui/icons-material/Chat';\nimport LibraryMusicIcon from '@mui/icons-material/LibraryMusic';\nimport ForumIcon from '@mui/icons-material/Forum';\nimport CloseIcon from '@mui/icons-material/Close';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\n\nlet backendRoute;\nif(process.env.NODE_ENV === \"development\"){\n    backendRoute = Config.localBackend\n    console.log('development MODE')\n}else {backendRoute = Config.productionBackend; \n    console.log('production MODE')\n}\n\nconst SpotifyNav = (props) => {\n    //styles\n    const classes = SpotifyStyles();\n\n    //states\n    const\n    [dpImg, setDpImg] = useState(),\n    [songDrawer, setSongDrawer] = useState(false),\n    [profileDrawer, setProfileDrawer] = useState(false);\n\n    //contexts\n    const\n    [spotifyToken, setSpotifyToken] = useContext(SpotifyTokenContext),\n    [userData, setUserData] = useContext(UserDataContext),\n    [ chattingWith, setChattingWith ] = useContext(ChattingWithContext);\n\n    //props\n    const\n    { loggedOut, insideChatsList, toggleChatListDrawer, insideChatBox, toggleChatBox } = props;\n    \n    //lifecycle\n    useEffect(()=> {\n        if(userData && userData.images[0]){\n            setDpImg(<img \n                src={userData.images[0]} \n                className={classes.dpImg}\n                alt='dp'\n                onClick={()=> setProfileDrawer(true)}\n                />)\n        }else{\n            setDpImg(null)\n        }\n    }, [userData])\n\n    // functions\n    const\n    profileFunc = ()=> {\n        console.log(userData)\n    },\n    logout = ()=> {\n        setSpotifyToken(null);\n        window.localStorage.clear();\n    },\n    profileSummary = ()=> {\n        let arr = [];\n        let proDp, proName, logoutDiv = <></>;\n        if(chattingWith){\n            proName = chattingWith.display_name;\n            if(chattingWith.images[0]){\n                proDp = <img \n                src={chattingWith.images[0].url} \n                className={classes.profileInfoImg}\n                alt='dp'\n                />\n            }else proDp = <div  className={classes.profileInfoImg}>\n                <AccountCircleIcon />\n            </div>\n        }else{\n            proName = userData.display_name;\n            if(userData.images[0]){\n                proDp = <img \n                src={userData.images[0].url} \n                className={classes.profileInfoImg}\n                alt='dp'\n                />\n            }else proDp = <div  className={classes.profileInfoImg}>\n                    <AccountCircleIcon />\n                </div>\n\n            logoutDiv = <div className={classes.logoutDiv}>\n                            <div \n                            className={classes.logoutButt}\n                            onClick={()=> logout()}\n                            >\n                                <span>LOGOUT</span>\n                                <LogoutIcon />\n                            </div>\n                        </div>\n        }\n        return (\n        <div className={classes.profileInfo}>\n            { proDp }\n            <div className={classes.profileInfoBody}>\n                <span className={classes.profileName}>{proName}</span>\n            </div>\n            { logoutDiv }\n        </div>)\n    }\n\n\n\n    return (\n        <>\n        <div className={classes.spotifyNav}>\n        <div className={classes.navbar}>\n            {\n            loggedOut ?\n                <div className={classes.spotifyTitle}>\n                    <span className={classes.hy}>hy</span>\n                    <span className={classes.spotifyH1}>SPOTIFY</span>\n                    {/* <span className={classes.kamble}>by</span>\n                    <span className={classes.abhay}>Abhay</span>\n                    <span className={classes.kamble}>Kamble</span> */}\n                </div>\n            : null\n            }\n            {//fNAVBAR (ON MAIN LANDING PAGE)\n            !loggedOut && userData && !insideChatsList && !insideChatBox ?\n                <>\n                <div className={classes.spotifyTitle}>\n                    <span className={classes.hy}>hy</span>\n                    <span className={classes.spotifyH1}>SPOTIFY</span>\n                    {insideChatsList ? \n                    <span className={classes.hy}>Chats</span>\n                    : null\n                    }\n                </div>\n\n                <div className={classes.dp_chats}>\n                    <ForumIcon \n                    className={classes.chatIcon} \n                    fontSize='large'\n                    onClick= {()=> {\n                        toggleChatListDrawer()\n                        const fullScreenMode = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;\n                        if(!fullScreenMode) document.activeElement.requestFullscreen()\n                    }}\n                    />\n                    {dpImg ? \n                        <img \n                        src={userData.images[0].url} \n                        className={classes.dpImg}\n                        alt='dp'\n                        onClick={()=> setProfileDrawer(true)}\n                        />\n                    : \n                        <AccountCircleIcon \n                        fontSize='large'\n                        className={classes.dpImg}\n                        onClick={()=> setProfileDrawer(true)}\n                        />\n                    }\n                    \n                </div>\n                </>\n            : \n            null\n            }\n            {//NAVBAR (inside chat list)\n            insideChatsList ? \n                <>\n                <div className={classes.spotifyTitle}>\n                    <span className={classes.hy}>hy</span>\n                    <span className={classes.spotifyH1}>SPOTIFY</span>\n                    <span className={classes.hy}>Chats</span>\n                </div>\n                <CloseIcon \n                className={classes.chatIcon} \n                fontSize='large'\n                onClick= {()=> toggleChatListDrawer()}\n                />\n                </>\n            : null\n            }\n            {//NAVBAR (inside chat box)\n            insideChatBox && chattingWith ?\n                <>\n                <div className={classes.spotifyTitle2}>\n                    {chattingWith.images[0] ? \n                        <img \n                        src={chattingWith.images[0].url} \n                        className={classes.frndDP}\n                        alt='dp'\n                        onClick={()=> setProfileDrawer(true)}\n                        />\n                    : \n                        <div className={classes.frndDP}>\n                            <AccountCircleIcon \n                            fontSize='large'\n                            onClick={()=> setProfileDrawer(true)}\n                            />\n                        </div>\n                    }\n                    <div className={classes.spotifyTitle_name}>\n                    <div>\n                        <span className={classes.hy2}>hy</span>\n                        <span className={classes.spotifyH12}>SPOTIFY</span>\n                        <span className={classes.hy2}>Chats</span>\n                    </div>\n                    <span className={classes.frndName}>\n                        {chattingWith.display_name}\n                    </span>\n                    </div>\n                </div>\n                    <CloseIcon \n                    className={classes.chatIcon} \n                    fontSize='large'\n                    onClick= {()=> {\n                        toggleChatBox()\n                    }}\n                    />\n                </>\n            :\n            null\n            }\n        </div>\n        <Drawer\n            anchor={'top'}\n            open={profileDrawer}\n            onClose={()=> setProfileDrawer(false)}>\n                { !loggedOut && userData ? profileSummary() : null}\n        </Drawer>\n        </div>\n        {\n            // showProfile ?\n            // : null\n        }\n        </>\n    );\n};\n\nexport default SpotifyNav;\n\n\n\n/*\n            <div className={classes.displayPicture} onClick={()=> {\n                setShowProfile(!showProfile);\n            }}>\n                <img \n                src={userData.images[0].url} \n                className={classes.dpImg}\n                alt='dp'\n                />\n            </div>\n*/","import { keyframes } from '@emotion/react';\nimport { makeStyles } from '@mui/styles';\n\nconst MiniPlayerStyles = makeStyles(theme=> ({\n    miniPlayer: {\n        position: 'absolute',\n        bottom: '0',\n        width: '100vw'\n    },\n    playNotificaton: {\n        position: 'absolute',\n        padding: '16px',\n        borderRadius: '50px',\n        backgroundColor: 'red',\n        top: '50vh',\n    },\n    playingSongName: {\n        fontStyle: 'italic',\n        fontWeight: 'bold',\n    }\n}))\n\nexport default MiniPlayerStyles;","import React, { useEffect, useState, useContext } from 'react';\nimport SpotifyPlayer from 'react-spotify-web-playback'\n\n//backend APIs\nimport { pauseSongAPI } from '../api/serverRequests'\n//context\nimport { SpotifyTokenContext } from '../contexts/spotifyTokenContext';\nimport { SpotifyTrackUriContext } from '../contexts/spotifyTrackUriContext';\nimport { PlayingTrackContext } from '../contexts/playingTrackContext';\nimport { UserDataContext } from '../contexts/userDataContext';\nimport { ChattingWithContext } from '../contexts/chattingWithContext';\n\n//styles\nimport MiniPlayerStyles from './styles/miniPlayerStyles';\n\n//material ui\nimport { Snackbar, Paper } from '@mui/material';\nconst MiniPlayer = (props) => {\n    //styles\n    const classes = MiniPlayerStyles();\n    //states\n    const \n    [ displayNotification, setDisplayNotification ] = useState(false),\n    [trackNotificationOpen, setTrackNotificationOpen] = useState({\n        open: false,\n        vertical: 'top',\n        horizontal: 'center',\n      });\n\n    //variables\n    const { vertical, horizontal, open } = trackNotificationOpen;\n    const styless = {\n        // bgColor: 'blue'\n        activeColor: 'red'\n    }\n\n    //contexts\n    const\n    [userData, setUserData] = useContext(UserDataContext),\n    [ chattingWith, setChattingWith ] = useContext(ChattingWithContext),\n    [spotifyToken, setSpotifyToken] = useContext(SpotifyTokenContext),\n    [spotifyTrackUri, setSpotifyTrackUri] = useContext(SpotifyTrackUriContext),\n    [ playingTrack, setPlayingTrack ] = useContext(PlayingTrackContext);\n\n    //life cycle\n    useEffect(()=> {\n        if(spotifyTrackUri.uri){\n            handleTrackNotification()\n            setPlayingTrack(true)\n        }else{\n            setPlayingTrack(false)\n        }\n    }, [spotifyTrackUri])\n\n    useEffect(()=> {\n        setPlayingTrack(false)\n\n        return ()=> {\n            console.log(\"EXITING MINIPLAYERRRRRRR\")\n            setPlayingTrack(false)\n        }\n    }, [])\n    // useEffect(()=> {\n    //     if(chattingWith) pauseSongAPI({userData, chattingWith, playingTrack});\n    // }, [playingTrack])\n\n    //functions\n    const \n    closeTrackNotification = (event, reason) => {\n        setTrackNotificationOpen({ ...trackNotificationOpen, open: false });\n    },\n    handleTrackNotification = () => {\n        setTrackNotificationOpen({\n            open: true,\n            vertical: 'top',\n            horizontal: 'center',\n          });\n    },\n    currentTrack = (uri)=> {\n        return (\n            <SpotifyPlayer \n            // anchorOrigin={{ vertical, horizontal }}\n            token = {spotifyToken}\n            showSaveIcon\n            play={playingTrack}\n            callback={state=> {\n                console.log(state)\n                if(!state.isPlaying) setPlayingTrack(false)\n                if(state.isPlaying) setPlayingTrack(true)\n            }}\n            uris = {uri ? [uri] : []}\n            />\n        )\n    },\n    showSnackbar = (trackName)=> {\n        console.log(playingTrack)\n        return (\n        <Snackbar\n                anchorOrigin={{ vertical, horizontal }}\n                open={open}\n                autoHideDuration={3000}\n                onClose={closeTrackNotification}\n                key={vertical + horizontal}\n            >\n            <Paper elevation={10} className={classes.playNotificaton}>\n                Playing <span className={classes.playingSongName}>{trackName}</span>\n            </Paper>\n        </Snackbar>\n        )\n    }\n\n    return (\n        <div \n        className={classes.miniPlayer} \n        >\n            <SpotifyPlayer \n            // anchorOrigin={{ vertical, horizontal }}\n            token = {spotifyToken}\n            showSaveIcon\n            play={playingTrack}\n            callback={state=> {\n                console.log(state)\n                if(!state.isPlaying) setPlayingTrack(false)\n                if(state.isPlaying) setPlayingTrack(true)\n            }}\n            uris = {spotifyTrackUri.uri ? [spotifyTrackUri.uri] : []}\n            />\n            {spotifyTrackUri.uri && playingTrack? showSnackbar(spotifyTrackUri.trackName) : null}\n        </div>\n    );\n};\n\nexport default MiniPlayer;","import React, { useEffect, useState, useContext } from 'react';\nimport SpotifyPlayer from 'react-spotify-web-playback'\n\n//backend APIs\nimport { pauseSongAPI } from '../api/serverRequests'\n//context\nimport { SpotifyTokenContext } from '../contexts/spotifyTokenContext';\nimport { SpotifyTrackUriContext } from '../contexts/spotifyTrackUriContext';\nimport { PlayingTrackContext } from '../contexts/playingTrackContext';\nimport { UserDataContext } from '../contexts/userDataContext';\nimport { ChattingWithContext } from '../contexts/chattingWithContext';\n\n//styles\nimport MiniPlayerStyles from '../spotify/styles/miniPlayerStyles';\n\n//material ui\nimport { Snackbar, Paper } from '@mui/material';\nconst MiniPlayer2 = (props) => {\n    //styles\n    const classes = MiniPlayerStyles();\n    //states\n    const \n    [ displayNotification, setDisplayNotification ] = useState(false),\n    [trackNotificationOpen, setTrackNotificationOpen] = useState({\n        open: false,\n        vertical: 'top',\n        horizontal: 'center',\n      });\n\n    //variables\n    const { vertical, horizontal, open } = trackNotificationOpen;\n    const styless = {\n        // bgColor: 'blue'\n        activeColor: 'red'\n    }\n\n    //contexts\n    const\n    [userData, setUserData] = useContext(UserDataContext),\n    [ chattingWith, setChattingWith ] = useContext(ChattingWithContext),\n    [spotifyToken, setSpotifyToken] = useContext(SpotifyTokenContext),\n    [spotifyTrackUri, setSpotifyTrackUri] = useContext(SpotifyTrackUriContext),\n    [ playingTrack, setPlayingTrack ] = useContext(PlayingTrackContext);\n\n    //life cycle\n    useEffect(()=> {\n        if(spotifyTrackUri.uri){\n            handleTrackNotification()\n            setPlayingTrack(true)\n        }else{\n            setPlayingTrack(false)\n        }\n    }, [spotifyTrackUri])\n\n    useEffect(()=> {\n        setPlayingTrack(false)\n\n        return ()=> {\n            console.log(\"EXITING MINIPLAYERRRRRRR\")\n            setPlayingTrack(false)\n        }\n    }, [])\n    // useEffect(()=> {\n    //     if(chattingWith) pauseSongAPI({userData, chattingWith, playingTrack});\n    // }, [playingTrack])\n\n    //functions\n    const \n    closeTrackNotification = (event, reason) => {\n        setTrackNotificationOpen({ ...trackNotificationOpen, open: false });\n    },\n    handleTrackNotification = () => {\n        setTrackNotificationOpen({\n            open: true,\n            vertical: 'top',\n            horizontal: 'center',\n          });\n    },\n    currentTrack = (uri)=> {\n        return (\n            <SpotifyPlayer \n            // anchorOrigin={{ vertical, horizontal }}\n            token = {spotifyToken}\n            showSaveIcon\n            play={playingTrack}\n            callback={state=> {\n                console.log(state)\n                if(!state.isPlaying) setPlayingTrack(false)\n                if(state.isPlaying) setPlayingTrack(true)\n            }}\n            uris = {uri ? [uri] : []}\n            />\n        )\n    },\n    showSnackbar = (trackName)=> {\n        console.log(playingTrack)\n        return (\n        <Snackbar\n                anchorOrigin={{ vertical, horizontal }}\n                open={open}\n                autoHideDuration={3000}\n                onClose={closeTrackNotification}\n                key={vertical + horizontal}\n            >\n            <Paper elevation={10} className={classes.playNotificaton}>\n                Playing <span className={classes.playingSongName}>{trackName}</span>\n            </Paper>\n        </Snackbar>\n        )\n    }\n\n    return (\n        <div \n        className={classes.miniPlayer} \n        >\n            <SpotifyPlayer \n            // anchorOrigin={{ vertical, horizontal }}\n            token = {spotifyToken}\n            showSaveIcon\n            play={playingTrack}\n            callback={state=> {\n                console.log(state)\n                if(!state.isPlaying) setPlayingTrack(false)\n                if(state.isPlaying) setPlayingTrack(true)\n            }}\n            uris = {spotifyTrackUri.uri ? [spotifyTrackUri.uri] : []}\n            />\n            {/* {spotifyTrackUri.uri && playingTrack && chattingWith ? showSnackbar(spotifyTrackUri.trackName) : null} */}\n        </div>\n    );\n};\n\nexport default MiniPlayer2;","import { makeStyles } from '@mui/styles';\n\nconst ChatBoxStyles = makeStyles(theme=> ({\n    chatBox : {\n        width: '100vw',\n        fontFamily: 'Montserrat, Open Sans, sans-serif',\n        backgroundColor: '#171821',\n        height: '100vh',\n        color: 'white',\n        margin: '0px',\n        display: 'flex', \n        flexDirection: 'column',\n    },\n    songSwitch: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        backgroundColor: '#42ff75',\n        color: 'black',\n        // paddingLeft: '4px',\n        // paddingRight: '8px'\n    },\n    musicIcon:{\n        animationName: '$riseout',\n        animationDuration: '200ms',\n        animationTimingFunction: 'ease-in-out',\n        marginRight: '8px'\n    },\n    '@keyframes riseout': {\n        '0%': {\n            transform: 'scale(0.1, 0.1)'\n        },\n        '100%': {\n            transform: 'scale(1, 1)'\n        },\n    },\n    songDrawer:{\n        fontFamily: 'Montserrat',\n        borderBottom: '3px solid #42ff75',\n        backgroundColor: '#171821',\n        color: 'white',\n    },\n    songDrawerTitle:{\n        textAlign: 'center',\n        fontSize: '1.5rem',\n        marginTop: '8px',\n        color: '#42ff75'\n    },\n    listenTogetherIcons: {\n        display: 'flex', justifyContent: 'space-between', alignItems: 'center',\n    },\n    msgArea:{\n        flex: '1',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        overflow: 'auto',\n        boxSizing: 'border-box',\n        '& > *': { width: '100%',}\n    },\n    msgBucket:{\n        display:'flex',\n        flexDirection: 'column-reverse',\n        overflow: 'auto',\n        fontSize: '0.8rem',\n        borderRadius: '0px 0px 25px 25px'\n    },\n    myMsg: {\n        backgroundColor: 'white',\n        minWidth: '30%',\n        color: 'black',\n        maxWidth: '50%',\n        \"border-radius\": '10px 10px 0px 10px',\n        marginLeft: 'auto',\n        padding: '4px 8px',\n        margin: '4px 8px',\n        textAlign: 'left',\n        boxShadow: '5px 5px 5px 0px rgba(0,0,0,0.75)',\n        display: 'flex',\n        flexDirection: 'column',\n        animationName: '$transitionInChatBox',\n        animationDuration: '400ms',\n    },\n    frndMsg:{\n        backgroundColor: '#42ff75',\n        minWidth: '30%',\n        color: 'black',\n        maxWidth: '50%',\n        \"border-radius\": '0px 10px 10px 10px',\n        marginRight: 'auto',\n        padding: '4px 8px',\n        margin: '4px 8px',\n        textAlign: 'left',\n        boxShadow: '5px 5px 5px 0px rgba(0,0,0,0.75)',\n        display: 'flex',\n        flexDirection: 'column',\n        animationName: '$transitionInChatList',\n        animationDuration: '400ms',\n    },\n    time: {\n        textAlign: 'right',\n        fontSize: '0.7rem',\n        fontStyle: 'italic',\n        opacity: '0.7'\n        // borderTop: '0.5px solid white'\n    },\n    typingArea:{\n        width: '95vw',\n        display: 'flex', alignItems: 'center',\n        margin:'0px 8px 8px 8px',\n        borderRadius: '25px',\n        backgroundColor: 'white',\n        color: 'black',\n        // paddingRight: '4px',\n    },\n    textBox: {\n        flexGrow: '1',\n        padding : '12px 8px',\n        // backgroundColor: 'grey',\n        borderRadius: '25px',\n        fontSize: '16px',\n        outline: 'none',\n        borderStyle: 'none',\n        '&:focus': {\n            \n        }\n    },\n    sendButt: {\n        marginRight: '10px',\n        borderRadius: '50%',\n    }\n}))\n\nexport default ChatBoxStyles;","import React, { useContext, useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport Config from '../config.json';\nimport { doc, onSnapshot, collection, query, orderBy, limit, where } from 'firebase/firestore';\n\n//backend APIs\nimport { addMsgToMyDatabase, addMsgToFrndsDatabase, isSharingSongAPI, playSharedSongAPI } from '../api/serverRequests';\n//components\nimport MusicBox from '../spotify/musicBox';\nimport SpotifyNav from '../spotify/spotifyNav';\nimport MiniPlayer2 from './miniPlayer2';\n//contexts\nimport { UserDataContext } from '../contexts/userDataContext';\nimport { ChattingWithContext } from '../contexts/chattingWithContext';\nimport { PlayingTrackContext } from '../contexts/playingTrackContext';\nimport { SpotifyTrackUriContext } from '../contexts/spotifyTrackUriContext';\nimport { MiniPlayer2Context } from '../contexts/miniPlayer2Context';\n//styles\nimport ChatBoxStyles from './styles/chatBoxStyles';\n//material ui\nimport SendIcon from '@mui/icons-material/Send';\nimport Switch from '@mui/material/Switch';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport QueueMusicIcon from '@mui/icons-material/QueueMusic';\nimport Drawer from '@mui/material/Drawer';\nimport Button from '@mui/material/Button'\n\nlet backendRoute;\nif(process.env.NODE_ENV === \"development\"){\n    backendRoute = Config.localBackend\n    console.log('development MODE')\n}else {backendRoute = Config.productionBackend; \n    console.log('production MODE')\n}\n\nconst ChatBox = (props) => {\n    //styles\n    const classes = ChatBoxStyles();\n\n    //contexts\n    const \n    [userData, setUserData] = useContext(UserDataContext),\n    [ chattingWith, setChattingWith ] = useContext(ChattingWithContext),\n    [spotifyTrackUri, setSpotifyTrackUri] = useContext(SpotifyTrackUriContext),\n    [ playingTrack, setPlayingTrack ] = useContext(PlayingTrackContext),\n    [ miniPlayer2, setMiniPlayer2 ] = useContext(MiniPlayer2Context);\n\n    //states\n    const\n    [ textMsg, setTextMsg ] = useState(''),\n    [ msgBucket, setMsgBucket ] = useState([]),\n    [ songDrawer, setSongDrawer ] = useState(false),\n    [ isSharingSong, setIsSharingSong ] = useState(false),\n    [ tempStyle, setTempStyle ] = useState({}),\n    [ dailogOpen, setDailogOpen ] = useState(false);\n    const dummy = useRef()\n    //props\n    const { toggleChatBox, db } = props;\n    //variables\n    const\n    tempStyle1 = {\n        paddingBottom : '6rem'\n    },\n    tempStyle2 = {\n        paddingBottom : '3rem'\n    };\n    //life cycle methods\n    useEffect(()=> {\n        isSharingSongAPI({ \n            myID: userData.id, \n            myName: userData.display_name, \n            frndID: chattingWith.id,\n            frndName: chattingWith.display_name, \n            isSharingSong:false, \n            songSharer: null\n        })\n        playSharedSongAPI({ \n            myID: userData.id, \n            myName: userData.display_name, \n            frndID: chattingWith.id,\n            frndName: chattingWith.display_name, \n            uri: null, \n            trackName: null \n        })\n\n        return ()=> {//return in useEffect[] executes when component is unmounted\n            console.log(\"UNMOUNTING CHATBOX\")\n            setIsSharingSong(false)\n            setMiniPlayer2(false)\n            isSharingSongAPI({ \n                myID: userData.id, \n                myName: userData.display_name, \n                frndID: chattingWith.id,\n                frndName: chattingWith.display_name, \n                isSharingSong:false, \n                songSharer: null\n            })\n            playSharedSongAPI({ \n                myID: userData.id, \n                myName: userData.display_name, \n                frndID: chattingWith.id,\n                frndName: chattingWith.display_name, \n                uri: null, \n                trackName: null \n            })\n        }\n    }, [])\n    useEffect(async ()=> {\n        const myID = userData.id,\n        frndName = chattingWith.display_name,\n        frndID = chattingWith.id;\n\n        if(db){\n            // console.log('fetching messages from db...');\n            let arr = [];\n            \n            const msgRef = query(collection(db, \"users\", myID, \"chats\", `${frndName}-${frndID}`, \"messages\"), orderBy(\"createdAt\", 'desc'), limit(50))\n            const sharingRef = query(\n                doc(db, \"users\", myID, \"chats\", `${frndName}-${frndID}`)\n                )\n\n            const getMsgs = onSnapshot(msgRef, snaps=> {\n                \n                arr = []\n                snaps.forEach(doc=> {\n                    arr.push({...doc.data(), id: doc.id})\n                })\n                setMsgBucket(arr)\n                if(dummy.current){\n                    dummy.current.scrollIntoView({behavior: 'smooth'})\n                }\n            })\n\n            const isSharingSongUpdate = onSnapshot(sharingRef, snaps=> {\n                console.log('updating isSharing...')\n                if(snaps.data()){\n                    const { sharedUri, sharedTrackName, songSharer } = snaps.data();\n                    if(songSharer === chattingWith.display_name && !sharedUri){\n                        // setDailogOpen(true)\n                        setIsSharingSong(true)\n                    }\n                    if(!snaps.data().isSharingSong){\n                        setIsSharingSong(false)\n                        setMiniPlayer2(false)\n                    }\n                    if(snaps.data().isSharingSong) setMiniPlayer2(true)\n                    if(snaps.data().isSharingSong && sharedUri){\n                        setSpotifyTrackUri({uri: sharedUri, trackName: sharedTrackName, isSharingSong});\n                    }\n                }\n            })\n        }\n    },[db])\n    useEffect(()=> {\n    }, [msgBucket])\n    useEffect(()=> {\n        const myID = userData.id,\n        frndName = chattingWith.display_name,\n        frndID = chattingWith.id;\n        let songSharer\n        if(isSharingSong){\n            setTempStyle(tempStyle1)\n            songSharer = userData.display_name\n        }else{\n            setTempStyle({})\n            songSharer = null\n        }\n    }, [isSharingSong])\n    useEffect(()=> {\n        if(dailogOpen){\n            setTimeout(() => {\n                setDailogOpen(false)\n            }, 5000);\n        }\n    }, [dailogOpen])\n    //functions\n    const\n    sendMsg = evt=> {\n        evt.preventDefault();\n        if (!textMsg.replace(/\\s/g, '').length) {\n            console.log('string only contains whitespace (ie. spaces, tabs or line breaks)');\n          }else{\n            console.log('sending msg to database...');\n            const\n            myID = userData.id,\n            myName = userData.display_name,\n            frndName = chattingWith.display_name,\n            frndID = chattingWith.id;\n\n            addMsgToMyDatabase(myID, frndName, frndID, textMsg)\n            addMsgToFrndsDatabase(frndID, myName, myID, textMsg)\n            setTextMsg('')\n        }\n    },\n    displayMsgs = ()=> {\n        let arr = [], timestamp, date, hrs = '', mins = '', class_name;\n        if(msgBucket){\n            msgBucket.map(msg=> {\n                if(msg.createdAt){\n                    date = new Date(msg.createdAt.seconds * 1000)\n                    hrs = date.getHours()\n                    mins = date.getMinutes()\n                }\n                timestamp = `${hrs} : ${mins}`;\n                if(msg.from === 'me'){\n                    arr.push(\n                        <div key={msg.id} className={classes.myMsg}>\n                            <span>{msg.msg}</span>\n                            <span className={classes.time}>{timestamp}</span>\n                        </div>\n                    )\n                }else{\n                    arr.push(\n                        <div key={msg.id} className={classes.frndMsg}>\n                            <span>{msg.msg}</span>\n                            <span className={classes.time}>{timestamp}</span>\n                        </div>\n                    )\n                }\n            })\n            return (arr);\n        }\n    },\n    isSharingSongFunc = (val)=> {\n        val ? setMiniPlayer2(true) : setMiniPlayer2(false)\n\n        setIsSharingSong(val)\n        let songSharer\n        if(val){\n            songSharer = userData.display_name\n        }else{\n            songSharer = null\n        }\n        // console.log('sending status to backend...');\n        isSharingSongAPI({ \n            myID: userData.id, \n            myName: userData.display_name, \n            frndID: chattingWith.id,\n            frndName: chattingWith.display_name, \n            isSharingSong:val, \n            songSharer: songSharer \n        })\n    },\n    dailogButton1 = () => {\n        \n      setDailogOpen(false);\n    },\n    dailogButton2 = () => {\n      setDailogOpen(false);\n      isSharingSongAPI({ \n        myID: userData.id, \n        myName: userData.display_name, \n        frndID: chattingWith.id,\n        frndName: chattingWith.display_name, \n        isSharingSong:false, \n        songSharer: null \n    })\n    };\n    \n    return (\n        <>\n        <div className={classes.chatBox}>\n            <SpotifyNav \n            toggleChatBox={toggleChatBox} \n            insideChatBox = {true}\n            className={classes.navbar}\n            />\n            <div className={classes.msgArea} style={tempStyle}>\n                <div className={classes.songSwitch}>\n                    <div>\n                    <span onClick={()=> setDailogOpen(true)}>Listen Songs Together</span>\n                    <Switch color=\"warning\" onClick={()=> isSharingSongFunc(!isSharingSong)} checked={isSharingSong}/>\n                    </div>\n                    { isSharingSong ? \n                        <QueueMusicIcon \n                        onClick = {()=> setSongDrawer(!songDrawer)}\n                        className = {classes.musicIcon}\n                        fontSize='large'/> \n                    : null}\n                    \n                </div>\n                <div className={classes.msgBucket}>\n                    <div ref={dummy}></div>\n                    {displayMsgs()}\n                </div>\n                <form \n                className={classes.typingArea}\n                onSubmit={(evt)=> sendMsg(evt)}\n                >\n                    <input \n                    className={classes.textBox}\n                    placeholder='Type Message Here...'\n                    onChange={(evt)=> setTextMsg(evt.target.value)}\n                    value={textMsg}\n                    >\n                    </input>\n                    <span className={classes.sendButt}>\n                    <SendIcon \n                    onClick={(evt)=> sendMsg(evt)}\n                    \n                    />\n                    </span>\n                </form>\n            </div>\n            <div>\n            { miniPlayer2 ? <MiniPlayer2 /> : null}\n            </div>\n        </div>\n        <Drawer\n            anchor={'top'}\n            open={songDrawer}\n            onClose={()=> setSongDrawer(false)}>\n                <div className={classes.songDrawer} >\n                    <div className={classes.songDrawerTitle}>SPOTIFY API</div>\n                    <MusicBox \n                    insideChatBox={true} \n                    closeSongDrawer={()=> setSongDrawer(false)}\n                    isSharingSong={isSharingSong}\n                    />\n                    <div \n                    style={{fontSize: '0.8rem', textAlign: 'center', opacity: '0.7'}}>\n                        Touch Anywhere Below To Close Drawer \n                    </div>\n                </div>\n        </Drawer>\n        <Dialog\n            open={dailogOpen}\n            onClose={()=> setDailogOpen(false)}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                {chattingWith ? \n                `${chattingWith.display_name} wants to play spotify with you.`\n                : null\n                }\n            </DialogTitle>\n            <DialogActions>\n            <button onClick={()=> setDailogOpen(false)}>Play</button>\n            <button onClick={()=> dailogButton2()} autoFocus>\n                Don't Play\n            </button>\n            </DialogActions>\n        </Dialog>\n        </>\n    );\n};\n\nexport default ChatBox;","import React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport Config from '../config.json'\n//components\nimport SpotifyNav from '../spotify/spotifyNav';\nimport SearchComp from './searchUser'\nimport ChatBox from './chatBox';\nimport LoadingComp from '../loadingComp';\n//contexts\nimport { UserDataContext } from '../contexts/userDataContext';\nimport { ChattingWithContext } from '../contexts/chattingWithContext';\n//styles\nimport ChatListStyles from './styles/chatListStyles';\n//material ui\nimport Drawer from '@mui/material/Drawer';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\n\nlet backendRoute;\nif(process.env.NODE_ENV === \"development\"){\n    backendRoute = Config.localBackend\n    console.log('development MODEEEEE')\n}else {backendRoute = Config.productionBackend; \n    console.log('production MODEEEEE')\n}\n\nconst ChatList = (props) => {\n    //styles\n    const classes = ChatListStyles();\n\n    //props\n    const { toggleChatListDrawer, db } = props\n\n    //contexts\n    const\n    [userData, setUserData] = useContext(UserDataContext),\n    [ chattingWith, setChattingWith ] = useContext(ChattingWithContext)\n\n    //states\n    const \n    [ allUsers, setAllUsers ] = useState(null),\n    [ chatBoxOpen, setChatBoxOpen ] = useState(false);\n\n    //life cycle methods\n    useEffect(()=> {\n        //get users\n        fetchUsers();\n\n        return ()=> {\n            console.log(\"unmounting chatlist component\")\n            setAllUsers(null)\n        }\n    }, [])\n\n    //functions\n    const\n    fetchUsers = ()=> {\n        axios.get(`${backendRoute}/chats/allUsers`).then(res=> {\n            setAllUsers(res.data)\n            })\n        .catch(err=> console.error(err))\n    },\n    openChatBox = (user)=> {\n        setChatBoxOpen(true);\n        setChattingWith(user);\n    },\n    closeChatBox = ()=> {\n        setChattingWith(undefined);\n        setChatBoxOpen(false);\n    },\n    displayAllUsers = ()=> {\n        let array = [];\n        if(allUsers){\n            allUsers.map(user=> {\n                let dp;\n                if(user.images[0]){\n                    dp = \n                    <img \n                    src={user.images[0].url}\n                    className={classes.dp} \n                    />\n                }else {\n                    dp = <AccountCircle \n                    fontSize='large'\n                    className={classes.dp} \n                    />\n                }\n                if(user.id !== userData.id){\n                    array.push(\n                        <div \n                        onClick={()=> openChatBox(user)} \n                        key={user.id}\n                        className={classes.chatListItem}\n                        >\n                            {dp}\n                            <span\n                            className={classes.chatListName}\n                            >\n                                {user.display_name}\n                            </span>\n                        </div>\n                    )\n                }\n            })\n        }\n        return array;\n    }\n\n    return (\n        <div className={classes.chatList}>\n            <SpotifyNav \n            toggleChatListDrawer={toggleChatListDrawer} \n            insideChatsList = {true}\n            />\n            <p>HySpotify Users</p>\n            { allUsers ? \n                displayAllUsers() \n                : \n                <LoadingComp description=\"Fetching Hyspotify Users\"/> \n            }\n            <Drawer\n                anchor={'right'}\n                open={chatBoxOpen}\n                onClose={()=> closeChatBox()}>\n                    <ChatBox \n                        toggleChatBox = {()=> closeChatBox()}\n                        db = {db}\n                    />\n            </Drawer>\n        </div>\n    );\n};\n\nexport default ChatList;","import { makeStyles } from '@mui/styles';\n\nconst ChatListStyles = makeStyles(theme=> ({\n    chatList : {\n        width: '100vw',\n        fontFamily: 'Montserrat, Open Sans, sans-serif',\n        backgroundColor: '#171821',\n        height: '100%',\n        color: 'white'\n    },\n    chatListItem:{\n        display: 'flex', alignItems: 'center',\n        margin: '4px auto',\n        '& svg': {\n            width: '3rem',\n            height: '3rem'\n        },\n    },\n    dp:{\n        height: '3rem',\n        borderRadius: '50%',\n    },\n    chatListName:{\n        marginLeft: '8px',\n    }\n}))\n\nexport default ChatListStyles;","import React, { useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Config from '../config.json'\n//contexts\nimport { SpotifyTokenContext } from '../contexts/spotifyTokenContext';\nimport { UserDataContext } from '../contexts/userDataContext';\nimport { MiniPlayer2Context } from '../contexts/miniPlayer2Context';\n//components\nimport SpotifyNav from './spotifyNav';\nimport MusicBox from './musicBox';\nimport MiniPlayer from './miniPlayer';\nimport ChatList from '../chats/chatList';\n//material ui\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport QueueMusicIcon from '@mui/icons-material/QueueMusic';\nimport Drawer from '@mui/material/Drawer';\n\n//styles\nimport SpotifyStyles from './styles/spotifyStyles'\n\nlet backendRoute;\nif(process.env.NODE_ENV === \"development\"){\n    backendRoute = Config.localBackend\n}else backendRoute = Config.productionBackend\n\nconst SpotifyRoot = (props) => {\n\n    const classes = SpotifyStyles();\n    let player;\n    \n    //contexts\n    const\n    [spotifyToken, setSpotifyToken] = useContext(SpotifyTokenContext),\n    [userData, setUserData] = useContext(UserDataContext),\n    [ miniPlayer2, setMiniPlayer2 ] = useContext(MiniPlayer2Context)\n\n    //props\n    const { db } = props\n\n    //states\n    const\n    [ chatDrawerOn, setChatDrawerOn ] = useState(false);\n\n\n    //life cycle methods\n    useEffect(()=> {\n        fetchUserData();\n    }, [])\n\n    useEffect(()=> {\n        if(userData) {\n            console.log('registering!!!!!!!!!!')\n            axios.post(`${backendRoute}/chats/registerUser`, userData)\n            .then(res=> console.log(res.data))\n            .catch(err=> console.log(err))\n        }\n    }, [userData])\n\n    //functions\n    const \n    fetchUserData = ()=> {\n        const config={\n            method: 'get',\n            url: \"https://api.spotify.com/v1/me\",\n            headers: {\n                'Content-Type' : 'application/json',\n                'Accept': 'application/json',\n                'Authorization' : `Bearer ${spotifyToken}`,\n            }\n        }\n        axios(config).then((res)=> {\n            // console.log(res.data);\n            setUserData(res.data);\n        })\n        .catch(err=> {\n            console.log(err)\n            console.log(spotifyToken)\n            setSpotifyToken(null)\n            window.localStorage.clear()\n            // window.location()\n        })\n    },\n    toggleChatListDrawer = ()=> setChatDrawerOn(!chatDrawerOn);\n\n\n    return (\n        <div className={classes.spotifyRoot} >\n            <SpotifyNav userData={userData} toggleChatListDrawer={toggleChatListDrawer}/> \n            <Drawer\n                anchor={'right'}\n                open={chatDrawerOn}\n                onClose={()=> setChatDrawerOn(false)}\n                className = {classes.chatListDrawer}\n            >\n                    <ChatList db={db} \n                    toggleChatListDrawer={toggleChatListDrawer}\n                    />\n            </Drawer>\n            {\n                userData ?\n                <>\n                <MusicBox userData={userData}/>\n                { !miniPlayer2 ? <MiniPlayer /> : null } \n                </> \n                : null\n            }\n        </div>\n    );\n};\n\nexport default SpotifyRoot;","import React, { useContext, useState } from 'react';\nimport UseAuth from './hooks/useAuth';\nimport Config from '../config.json'\n\nimport { SpotifyTokenContext } from '../contexts/spotifyTokenContext';\nimport { Button } from '@mui/material'\n//components\nimport SpotifyNav from './spotifyNav';\nimport LoadingComp from '../loadingComp';\n//styles\nimport LoginStyles from './loginStyles'\n\nlet clientID, redirectUri;\n//\n\nconst SpotifyLogin = () => {\n    //styles\n    const classes = LoginStyles();\n\n    //variables\n    clientID = Config.spotifyclientID\n    process.env.NODE_ENV === \"development\" ? \n        redirectUri = Config.localhost : redirectUri = Config.productionHost\n\n    const authURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=code&redirect_uri=${redirectUri}&scope=streaming%20user-read-private%20user-read-email%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state%20user-read-currently-playing%20playlist-read-private%20playlist-read-private%20playlist-modify-public%20playlist-read-collaborative%20user-top-read%20user-read-recently-played%20user-read-playback-position%20app-remote-control`;\n    const code = new URLSearchParams(window.location.search).get('code');\n    let accessToken ;\n    \n    //contexts\n    const \n    [spotifytoken, setSpotifyToken] = useContext(SpotifyTokenContext);\n    //states\n    const [ clicked, setClicked ] = useState(false)\n\n\n    if(code) accessToken= UseAuth(code);\n    if(accessToken) {\n        setSpotifyToken(accessToken);\n        console.log(accessToken)\n    }else {\n        console.log('no access token');\n        // window.localStorage.clear();\n    }\n\n    return (\n        <div className={classes.spotifyLogin}>\n            <SpotifyNav loggedOut={true}/>\n            <div className={classes.pageBody}>\n            {\n            !code ?\n            <>\n            <div className={classes.loginButton} onClick={()=> setClicked(true)}>\n                <a href={authURL}>\n                <span className={classes.loginButt}>Login With Spotify</span>\n                </a>\n            </div>\n            <div \n            className={classes.description}\n            >\n                {clicked ? \n                    <p className={classes.takingToSpotify}>\n                    <LoadingComp description=\"Taking you to spotify's login page...\"/> \n                    </p> \n                : null}\n                <p>Chat with your friends and listen spotfiy togehter</p>\n            </div>\n            </>\n                :\n                <LoadingComp description=\"fetching data...\"/> \n            }\n            </div>\n        </div>\n    );\n};\n\nexport default SpotifyLogin;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Config from '../../config.json'\nconst UseAuth = (code) => {\n    const\n    [accessToken, setAccessToken] = useState(),\n    [refreshToken, setRefreshToken] = useState(),\n    [expiresIn, setExpiresIn] = useState();\n    let redirectUri, backendRoute;\n\n    if(process.env.NODE_ENV === \"development\"){\n        redirectUri = Config.localhost;\n        backendRoute = Config.localBackend;\n    }else{\n        redirectUri = Config.productionHost;\n        backendRoute = Config.productionBackend\n    }\n\n    //get acces, refresh token\n    useEffect(()=> {\n        axios.post(`${backendRoute}/spotify/login`, {\n            data:{\n                code,\n                redirectUri : redirectUri\n            }\n        }).then(res=> {\n            console.log(res.data);\n            setAccessToken(res.data.accessToken);\n            setRefreshToken(res.data.refreshToken);\n            setExpiresIn(res.data.expiresIn);\n            \n\n            window.localStorage.setItem('spotifyToken', res.data.accessToken)\n            window.localStorage.setItem('spotifyRefreshToken', res.data.refreshToken)\n            window.localStorage.setItem('spotifyExpiresIn', res.data.expiresIn)\n            window.history.pushState({}, null, '/');\n        }).catch(err=> {\n            console.log('spo err');\n            console.log(err);\n            console.log(code);\n            console.log('spo err');\n        })\n    }, [code])\n\n    //refresh token after expiry\n    // useEffect(()=> {\n    //     if(!refreshToken || !expiresIn) return;\n\n    //     const timeout = setInterval(()=> {\n    //         axios.post('https://us-central1-chatapp-8a77f.cloudfunctions.net/user/spotify/refresh', {\n    //             refreshToken\n    //         }).then(res=> {\n    //             setAccessToken(res.data.accessToken);\n    //             setExpiresIn(res.data.expiresIn);\n                \n    //             window.localStorage.setItem('spotifyToken', JSON.stringify(res.data.accessToken))\n    //         }).catch(err=> {\n    //             console.log(err);\n    //             window.location = '/spotify';\n    //         })\n    //     }, (expiresIn - 60) * 1000)\n\n    //     return ()=> clearInterval(timeout);\n    // }, [refreshToken, expiresIn])\n\n    return accessToken;\n};\n\nexport default UseAuth;","import { keyframes } from '@emotion/react';\nimport { makeStyles } from '@mui/styles';\n\nconst LoginStyles = makeStyles(theme=> ({\n    spotifyLogin: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100vh'\n    },\n    loadingDots: {\n        // backgroundColor: 'red',\n        fontSize: '10rem',\n        animationName: '$dotColors',\n        animationDuration: '2000ms',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'ease-in-out',\n        color: 'white'\n    },\n    '@keyframes dotColors': {\n        '0%': { color: 'white'},\n        '50%': { color: '#1DB954'},\n        // '75%': { color: 'black'},\n        '100%': { color: '#42ff75'},\n    }, \n    pageBody: {\n        display: 'flex',\n        alignItems: 'stretch',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        flex: '1',\n        textAlign: 'center',\n        position: 'relative'\n    },\n    introText: {\n        color: 'white'\n    },\n    loginButton: {\n    },\n    loginButt: {\n        color: '#42ff75',\n        border: '1px solid #42ff75',\n        padding: '16px 32px',\n        borderRadius: '10px',\n        '&:hover': {\n            backgroundColor: '#42ff75',\n            color: 'white',\n        }\n    },\n    description: {\n        color: 'white',\n        textAlign: 'center',\n        // margin: '32px auto',\n        marginTop: '32px',\n        marginBottom: '32px',\n        fontSize: '0.9rem',\n        \n    },\n    takingToSpotify: {\n        animationName: '$animation1',\n        animationDuration: '1000ms',\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        textAlign: 'center',\n        width: '99%'\n    },\n    '@keyframes animation1': {\n        '0%': { opacity: 0 },\n        '100%': { opacity: 1 }\n    },\n\n}))\n\nexport default LoginStyles;","import { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route} from 'react-router-dom'\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\nimport { initializeApp } from \"firebase/app\";\nimport app from './firebaseConfig'\n// import firebase from 'firebase/compat/app';\nimport 'firebase/firestore';\nimport admin from 'firebase-admin'\nimport axios from 'axios'\nimport './App.css'\n\n//components\nimport SpotifyRoot from './spotify/spotifyRoot';\nimport SpotifyLogin from './spotify/spotifyLogin';\n\n//contexts\nimport { SpotifyTokenContext } from './contexts/spotifyTokenContext';\nimport { SpotifyTrackUriContext } from './contexts/spotifyTrackUriContext';\nimport { UserDataContext } from './contexts/userDataContext';\nimport { ChattingWithContext } from './contexts/chattingWithContext'\nimport { PlayingTrackContext } from './contexts/playingTrackContext'\nimport { MiniPlayer2Context } from './contexts/miniPlayer2Context'\n\n\n\nconst App = () => {\n  // states\n  const\n  [userData, setUserData] = useState(),\n  [spotifytoken, setSpotifyToken] = useState(),\n  [spotifyTrackUri, setSpotifyTrackUri] = useState({\n    uri: undefined, trackName: undefined, isSharingSong: undefined\n  }),\n  [ playingTrack, setPlayingTrack ] = useState(false),\n  [chattingWith, setChattingWith] = useState(),\n  [ miniPlayer2, setMiniPlayer2 ] = useState(false);\n  \n  const db = getFirestore(app);\n\n  //life cycle\n  useEffect(()=> {\n    if(window.localStorage.getItem('spotifyToken')){\n      setSpotifyToken(window.localStorage.getItem('spotifyToken'))\n    }\n  }, [])\n\n  //functions \n\n\n  return (\n    <Router>\n    <div className=\"App\">\n      <SpotifyTokenContext.Provider value={[spotifytoken, setSpotifyToken]}>\n      <UserDataContext.Provider value={[userData, setUserData]}>\n      <SpotifyTrackUriContext.Provider value={[spotifyTrackUri, setSpotifyTrackUri]}>\n      <PlayingTrackContext.Provider value={[ playingTrack, setPlayingTrack ]}>\n      <ChattingWithContext.Provider value={[chattingWith, setChattingWith]}>\n      <MiniPlayer2Context.Provider value={[ miniPlayer2, setMiniPlayer2 ]}>\n        <Routes>\n          <Route exact path='/' \n          element={spotifytoken ? <SpotifyRoot db={db}/> : <SpotifyLogin/>}\n          />\n          <Route exact path='/chats' \n          element={spotifytoken ? <SpotifyRoot db={db}/> : <SpotifyLogin/>}\n          />\n        </Routes>\n      </MiniPlayer2Context.Provider>\n      </ChattingWithContext.Provider>\n      </PlayingTrackContext.Provider>\n      </SpotifyTrackUriContext.Provider>\n      </UserDataContext.Provider>\n      </SpotifyTokenContext.Provider>\n    </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}